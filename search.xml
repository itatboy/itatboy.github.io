<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于CODESYS的PAC XML规则</title>
      <link href="//post/SoftDesign-8.html"/>
      <url>//post/SoftDesign-8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在国产化替代大浪潮下，国内涌现了大批基于CODESYS Runtime的PAC控制器，最具代表性的是汇川AC系列，本篇主要记录CODESYS设备的XML规则。</p><p><a href="http://www.3s-software.com/schemas/DeviceDescription-1.0.xsd">3S规范文件1</a><br><a href="http://www.3s-software.com/schemas/TargetSettings-0.1.xsd">3S规范文件2</a></p><h2 id="一、任务配置"><a href="#一、任务配置" class="headerlink" title="一、任务配置"></a>一、任务配置</h2><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-8/1.jpg" alt="支持微秒、限制最小扫描周期为125微秒"></p><h2 id="二、空间分配"><a href="#二、空间分配" class="headerlink" title="二、空间分配"></a>二、空间分配</h2><p>空间大小计算规则：如图<code>Retain</code>大小设置为<code>0x100000</code>，换为10进制为<code>1048576</code>字节，等于<code>1M</code>，<code>Persistent</code>同理</p><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-8/2.jpg" alt="Petain Persistent"></p>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> CODESYS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04 GitLab部署</title>
      <link href="//post/IDE-6.html"/>
      <url>//post/IDE-6.html</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p><a href="https://docs.gitlab.com/">GitLab官方文档</a><br><a href="http://cdimages.ubuntu.com/ubuntu/releases/22.04/release/">Ubuntu官方镜像</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/releases/">Ubuntu清华镜像</a><br><a href="https://packages.gitlab.com/gitlab">GitLab官方镜像</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/">GitLab清华镜像</a><br><a href="https://docs.gitlab.com/omnibus/settings/memory_constrained_envs.html">内存受限环境中运行</a></p><h2 id="一、初步尝试"><a href="#一、初步尝试" class="headerlink" title="一、初步尝试"></a>一、初步尝试</h2><ul><li><p><strong>更新软件源</strong></p><pre><code>sudo apt-get update</code></pre></li><li><p><strong>安装GitLab</strong></p><pre><code>sudo apt-get install gitlab-ce</code></pre><blockquote><p>执行出错继续看下一章</p></blockquote></li></ul><h2 id="二、再次尝试"><a href="#二、再次尝试" class="headerlink" title="二、再次尝试"></a>二、再次尝试</h2><ul><li><p><strong>安装依赖</strong></p><pre><code>sudo apt install ca-certificates curl openssh-server postfix</code></pre><blockquote><p>postfix选择<code>Internet Site</code></p></blockquote></li><li><p><strong>脚本下载及执行</strong></p><pre><code>curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</code></pre></li><li><p><strong>更新软件源</strong></p><pre><code>sudo apt-get update</code></pre></li><li><p><strong>安装GitLab</strong></p><pre><code>sudo apt-get install gitlab-ce</code></pre></li></ul><h2 id="三、配置相关"><a href="#三、配置相关" class="headerlink" title="三、配置相关"></a>三、配置相关</h2><ul><li><p><strong>配置文件中修改URL</strong></p><pre><code>sudo gedit /etc/gitlab/gitlab.rb</code></pre></li><li><p><strong>设置本机ip及GitLab对应端口</strong></p><p>external_url ‘<a href="http://192.168.xx.xxx:9080&#39;">http://192.168.xx.xxx:9080&#39;</a></p><p>用户名: <code>root</code></p><p>密码在<code>/etc/gitlab/initial_root_password</code></p></li><li><p><strong>重新加载配置</strong></p><pre><code>nohup /opt/gitlab/embedded/bin/runsvdir-start &amp;</code></pre><pre><code>sudo gitlab-ctl reconfigure</code></pre><p><a href="https://blog.csdn.net/hechangfei/article/details/122358747">点这里解决卡住问题</a></p></li><li><p><strong>解决<code>free -h cached</code>过大问题，需要切换到root<code>sudo -i</code></strong></p><pre><code>syncecho 1 &gt; /proc/sys/vm/drop_cachesecho 2 &gt; /proc/sys/vm/drop_cachesecho 3 &gt; /proc/sys/vm/drop_caches</code></pre></li><li><p><strong>开机启动，非必要</strong></p><pre><code>sudo systemctl enable gitlab-runsvdir.service</code></pre></li><li><p><strong>取消开机启动，非必要</strong></p><pre><code>sudo systemctl disable gitlab-runsvdir.service</code></pre></li><li><p><strong>GitLab常用命令</strong></p><pre><code>sudo gitlab-ctl reconfigure  // 重新加载配置，每次修改/etc/gitlab/gitlab.rb文件之后执行sudo gitlab-ctl status // 查看 GitLab 状态sudo gitlab-ctl start // 启动 GitLabsudo gitlab-ctl stop // 停止 GitLabsudo gitlab-ctl restart //     重启 GitLabsudo gitlab-ctl tail // 查看所有日志sudo gitlab-ctl tail nginx/gitlab_acces.log // 查看 nginx 访问日志sudo gitlab-ctl tail postgresql // 查看 postgresql 日志</code></pre></li><li><p><strong>防火墙常用命令</strong></p><pre><code>sudo ufw status // 查看防火墙状态sudo ufw enable // 打开防火墙sudo ufw disable // 关闭防火墙sudo ufw allow 22/tcp // 允许所有的外部IP访问本机的22/tcp (ssh)端口sudo ufw allow 9090 // 允许所有的外部IP访问本机的自定义9092端口sudo ufw delete allow 9092 // 禁用 9092 端口sudo ufw allow from 192.168.1.10 // 允许此IP访问所有的本机端口，即添加到了允许访问列表sudo ufw delete allow from 192.168.1.10 // 从允许访问列表中删除，即禁止此ip进行访问</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适用于Linux的Windows子系统</title>
      <link href="//post/IDE-5.html"/>
      <url>//post/IDE-5.html</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>适用于Linux的Windows子系统（WSL）可让开发人员直接在Windows上按照原样运行GNU/Linux环境，且不会产生传统虚拟机或双启动设置开销。这里主要记录两种方式来安装Ubuntu：通过<code>Microsoft Store安装</code>和<code>手动安装</code>。</p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/">WSL官方文档</a></p><p><a href="https://www.cnblogs.com/wufeiyun/p/12095520.html">安装参考</a></p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ul><li><strong>在控制面版-》程序与功能-》启用或关闭Windows功能 勾选如下选项</strong></li></ul><p><img src="https://itatboy.github.io//image/IDE/IDE-5/1.png" alt="打开或关闭Windows功能"></p><blockquote><p>运行WSL的先决条件是：电脑系统必须运行Windows10 2004及更高版本或Windows11。</p></blockquote><h2 id="二、Microsoft-Store安装"><a href="#二、Microsoft-Store安装" class="headerlink" title="二、Microsoft Store安装"></a>二、Microsoft Store安装</h2><ul><li><strong>在Microsoft Store搜索并安装Ubuntu子系统，推荐Ubuntu 20.04</strong></li></ul><p><img src="https://itatboy.github.io//image/IDE/IDE-5/2.png" alt="安装Ubuntu"></p><ul><li><strong>在开始菜单启动Ubuntu子系统，等待启动完成</strong></li></ul><p><img src="https://itatboy.github.io//image/IDE/IDE-5/3.png" alt="安装Ubuntu"></p><ul><li><strong>设置用户名及密码</strong></li></ul><p><img src="https://itatboy.github.io//image/IDE/IDE-5/4.png" alt="安装Ubuntu"></p><h2 id="三、手动安装"><a href="#三、手动安装" class="headerlink" title="三、手动安装"></a>三、手动安装</h2><p><strong>1.下载WSL</strong></p><p>点这里下载需要的Linux发行版](<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">https://docs.microsoft.com/zh-cn/windows/wsl/install-manual</a>)</p><p><strong>2.将下载的appx文件解压</strong></p><p>解压后的文件夹就是WSL所在文件夹，安装过程只是注册地址，建议将文件夹放到合适位置，例如D盘</p><p><strong>3.双击文件夹内的exe文件开始安装</strong></p><p>根据提示设置用户名和密码，至此安装完成</p><p><strong>使用WSL</strong></p><p>启动方式一：双击<code>exe</code>文件启动</p><p>启动方式二：在命令行中输入<code>wsl</code>或<code>bash</code></p><p>查看所有发行版：wslconfig /l</p><p>指定默认发行版：wslconfig /s 发行版名</p><p>卸载WSL：wslconfig /u 发行版名</p><p>命令行输入<code>\\wsl$</code>可打开WSL目录，右键<code>Ubuntu</code>文件夹选择映射网络驱动器可以将目录添加到我的电脑</p><h2 id="四、进阶"><a href="#四、进阶" class="headerlink" title="四、进阶"></a>四、进阶</h2><p><a href="https://blog.csdn.net/weixin_43876113/article/details/105261577">使用VScode连接WSL参考</a></p><p>设置root密码：<code>sudo passwd root</code></p><p>更新：<code>sudo apt-get update</code>和<code>sudo apt-get upgrade</code></p><p>gcc环境搭建：<code>sudo apt-get install build-essential</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下Linux子系统编译OpwnWrt全记录</title>
      <link href="//post/OpenWrt-1.html"/>
      <url>//post/OpenWrt-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://openwrt.org/">OpenWrt官网</a></p><p><a href="https://www.bilibili.com/read/cv9714518/">参考</a></p><p>2003年，Cisco/Linksys发布了基于Linux开发的WRT54G无线路由器，Linux是基于GPL许可证发布的，按照该许可证Cisco需要公开WRT54G 源代码。2003年3月， Cisco迫于压力开放了WRT54G源代码。此后陆续出现了一些基于Cisco源码的第三方路由器固件，OpenWrt就是其中之一。</p><p>本次编译基于Windows的Linux子系统，<a href="https://docs.microsoft.com/zh-cn/windows/wsl/about">点这里了解什么是Windows子系统</a></p><p>本次编译的是<a href="https://gitee.com/tatboy/lede">lede</a>固件</p><h2 id="一、编译环境"><a href="#一、编译环境" class="headerlink" title="一、编译环境"></a>一、编译环境</h2><p><a href="https://itatboy.github.io/post/IDE-5.html">点这里了解如何准备编译环境</a></p><blockquote><p>需要安装Ubuntu 20.04</p></blockquote><h2 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h2><ol><li>更新软件列表 </li></ol><pre><code>sudo apt-get update</code></pre><ol start="2"><li>安装依赖软件 </li></ol><pre><code>sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync</code></pre><ol start="3"><li>克隆仓库 </li></ol><pre><code>git clone https://github.com/coolsnowwolf/lede</code></pre><ol start="4"><li>cd到<code>lede</code>目录，更新软件。在这之前，可以添加自己需要的组件，<a href="https://github.com/kenzok8/openwrt-packages">点这里学习如何添加</a></li></ol><pre><code>./scripts/feeds update -a./scripts/feeds install -a</code></pre><ol start="5"><li>配置 -》<strong>详见第三章</strong></li></ol><pre><code>make menuconfig</code></pre><ol start="6"><li>下载dll库，需要科学上网</li></ol><pre><code>make -j8 download V=s</code></pre><ol start="7"><li>子系统需要切换系统变量</li></ol><pre><code>source /etc/environment</code></pre><ol start="8"><li>编译，首次编译时间较长</li></ol><pre><code>make -j1 V=s</code></pre><ul><li>重新配置</li></ul><pre><code>rm -rf ./tmp &amp;&amp; rm -rf .configmake menuconfigmake -j$(($(nproc) + 1)) V=s</code></pre><ul><li>二次编译</li></ul><pre><code>cd ledegit pull./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -amake defconfigmake -j8 downloadmake -j$(($(nproc) + 1)) V=s</code></pre><ul><li>子系统路径，注意修改用户名</li></ul><pre><code>C:\Users\Xin\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\LocalState\rootfs</code></pre><blockquote><p><code>ext4</code>与<code>squashfs</code>是文件系统格式，选择<code>squashfs</code>，<code>factory</code>为刷机固件，<code>sysupgrade</code>为升级固件。</p></blockquote><h2 id="三、关于配置"><a href="#三、关于配置" class="headerlink" title="三、关于配置"></a>三、关于配置</h2><h2 id="四、刷写固件"><a href="#四、刷写固件" class="headerlink" title="四、刷写固件"></a>四、刷写固件</h2>]]></content>
      
      
      <categories>
          
          <category> OpenWrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打开新世界的大门</title>
      <link href="//post/ssr.html"/>
      <url>//post/ssr.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/qingshuisiyuan/electron-ssr-backup">PC SSR</a></p><p><a href="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7">SS/SSR免费账号</a></p><p><a href="https://marshzero.github.io/2020/10/27/ubuntu%E4%BD%BF%E7%94%A8ss%E6%88%96ssr%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/">Ubuntu使用SS/SSR与配置全局代理</a></p><p><a href="https://www.itblogcn.com/article/406.html">V2Ray搭建</a></p><blockquote><p>V2ray客户端至Gitee下载</p></blockquote><h2 id="一、Google-Cloud"><a href="#一、Google-Cloud" class="headerlink" title="一、Google Cloud"></a>一、Google Cloud</h2><blockquote><p>2022.02.10：免费90天</p></blockquote><p><a href="https://www.wujiayi.vip/index.php/archives/368/">参考</a></p><h4 id="1、账号注册"><a href="#1、账号注册" class="headerlink" title="1、账号注册"></a>1、账号注册</h4><h4 id="2、服务器创建"><a href="#2、服务器创建" class="headerlink" title="2、服务器创建"></a>2、服务器创建</h4><p><img src="https://itatboy.github.io//image/ssr/1.png" alt="选择Compute Engine"></p><p><img src="https://itatboy.github.io//image/ssr/2.png" alt="创建实例"></p><p><img src="https://itatboy.github.io//image/ssr/3.png" alt="设置名称，区域选择香港或台湾，性能选择最低性能即可"></p><p><img src="https://itatboy.github.io//image/ssr/4.png" alt="系统选择Debian，允许http及https"></p><p><img src="https://itatboy.github.io//image/ssr/5.png" alt="选择VPC网络"></p><p><img src="https://itatboy.github.io//image/ssr/6.png" alt="选择外部IP地址"></p><p><img src="https://itatboy.github.io//image/ssr/7.png" alt="修改为静态地址"></p><h4 id="3、远程登陆"><a href="#3、远程登陆" class="headerlink" title="3、远程登陆"></a>3、远程登陆</h4><h2 id="二、亚马逊-Cloud"><a href="#二、亚马逊-Cloud" class="headerlink" title="二、亚马逊 Cloud"></a>二、<a href="https://aws.amazon.com/cn">亚马逊 Cloud</a></h2><p>2022.02.10：免费1年，搭建梯子见<code>第四节、搭建V2ray服务</code></p><p><a href="https://blog.ffing.cn/linux/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-%E5%85%8D%E8%B4%B9%E4%BA%9A%E9%A9%AC%E9%80%8A%E4%BA%91%E6%90%AD%E5%BB%BAv2ray">参考</a></p><h4 id="1、账号注册-1"><a href="#1、账号注册-1" class="headerlink" title="1、账号注册"></a>1、账号注册</h4><h4 id="2、服务器创建-1"><a href="#2、服务器创建-1" class="headerlink" title="2、服务器创建"></a>2、服务器创建</h4><h4 id="3、远程登陆-1"><a href="#3、远程登陆-1" class="headerlink" title="3、远程登陆"></a>3、远程登陆</h4><h2 id="三、甲骨文-Cloud"><a href="#三、甲骨文-Cloud" class="headerlink" title="三、甲骨文 Cloud"></a>三、<a href="https://www.oracle.com/cn">甲骨文 Cloud</a></h2><p>2022.02.10：永久免费，搭建梯子见<code>第四节、搭建V2ray服务</code></p><p><a href="https://zhuanlan.zhihu.com/p/352736372">参考</a></p><h4 id="1、账号注册-2"><a href="#1、账号注册-2" class="headerlink" title="1、账号注册"></a>1、账号注册</h4><h4 id="2、服务器创建-2"><a href="#2、服务器创建-2" class="headerlink" title="2、服务器创建"></a>2、服务器创建</h4><h4 id="3、远程登陆-2"><a href="#3、远程登陆-2" class="headerlink" title="3、远程登陆"></a>3、远程登陆</h4><p>远程登录需要私钥文件，后缀名为<code>key</code>,MobaXterm配置如下<br><img src="https://itatboy.github.io//image/ssr/8.png" alt="修改为静态地址"></p><h4 id="4、修改IP"><a href="#4、修改IP" class="headerlink" title="4、修改IP"></a>4、修改IP</h4><p>IP有被墙的风险，修改IP大致步骤如下：</p><ul><li>在<code>网络</code>-&gt;<code>IP管理</code>-&gt;<code>预留的公共IP</code>内，预留公共IP地址，命名建议为日期<code>20220523</code></li><li>在<code>实例</code>详情页-<code>附加的VNIC</code>-&gt;<code>VNIC</code>详情页-&gt;编辑IPv4地址，先选择<code>没有公共IP</code>，再选择<code>预留的公共IP</code></li></ul><h2 id="四、搭建V2ray服务"><a href="#四、搭建V2ray服务" class="headerlink" title="四、搭建V2ray服务"></a>四、搭建V2ray服务</h2><pre class=" language-一键安装脚本"><code class="language-一键安装脚本">bash <(curl -s -L https://git.io/v2ray-setup.sh)</code></pre><pre class=" language-V2ray相关命令"><code class="language-V2ray相关命令">sudo -i 切换到root用户执行下面操作v2ray info 查看 V2Ray 配置信息v2ray config 修改 V2Ray 配置v2ray link 生成 V2Ray 配置文件链接v2ray infolink 生成 V2Ray 配置信息链接v2ray qr 生成 V2Ray 配置二维码链接v2ray ss 修改 Shadowsocks 配置v2ray ssinfo 查看 Shadowsocks 配置信息v2ray ssqr 生成 Shadowsocks 配置二维码链接v2ray status 查看 V2Ray 运行状态v2ray start 启动 V2Rayv2ray stop 停止 V2Rayv2ray restart 重启 V2Rayv2ray log 查看 V2Ray 运行日志v2ray update 更新 V2Rayv2ray update.sh 更新 V2Ray 管理脚本v2ray uninstall 卸载 V2Ray</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于Ubuntu应用开发初体验</title>
      <link href="//post/SoftDesign-7.html"/>
      <url>//post/SoftDesign-7.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期逐步参与到公司Q系列产品开发中，Q系列作为中型PAC，采用了Linux + CODESYS runtime的技术方案，开发环境建议使用<code>Ubuntu 16.04</code>版本。</p><p><strong>ARM:</strong> Q0、Q1、Q3</p><p><strong>X86:</strong> Q5、Q7、Q9</p><p><a href="https://itatboy.github.io/post/IDE-4.html">基于VMware安装Ubuntu</a></p><p><a href="https://itatboy.github.io/post/IDE-5.html">适用于Linux的Windows子系统</a></p><h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><p>首先更新软件源<code>sudo apt update</code>，安装<code>git</code>，生成密钥，并将密钥添加至<code>GitLab</code>平台</p><p><a href="https://itatboy.github.io/post/IDE-3.html">点这里学习Git操作</a></p><p><a href="https://itatboy.github.io/post/SoftDesign-5.html">点这里学习配置ARM交叉编译环境</a></p><h3 id="编译X86可执行程序，导入QT依赖库"><a href="#编译X86可执行程序，导入QT依赖库" class="headerlink" title="编译X86可执行程序，导入QT依赖库"></a>编译X86可执行程序，导入QT依赖库</h3><pre><code>/* 解压 */tar -jxvf QT.tar.bz2/* 移动 */sudo mv lib* /usr/lib/x86_64-linux-gun/* 更新动态库链接 */sudo ldconfig</code></pre><blockquote><p>子系统下执行make可能会报错，使用<code>sudo apt-cache search</code>命令搜索so在哪个包内，安装对应的包即可</p></blockquote><h2 id="二、解决问题"><a href="#二、解决问题" class="headerlink" title="二、解决问题"></a>二、解决问题</h2><h3 id="1、打包权限不够"><a href="#1、打包权限不够" class="headerlink" title="1、打包权限不够"></a>1、打包权限不够</h3><p>右键pack_ota_vendor_image.sh -&gt; 属性 -&gt;  权限 -&gt; 勾选“允许执行文件”</p><blockquote><p>也可将pack_ota_vendor_image文件见权限设置为777</p></blockquote><h3 id="2、只读文件系统"><a href="#2、只读文件系统" class="headerlink" title="2、只读文件系统"></a>2、只读文件系统</h3><pre><code>mount -o remount,rw /</code></pre><ul><li>修改q5/vendor路径下的cfg文件，首先<code>df -h</code>查看硬盘分区情况，然后<code>mount -o remount,rw /硬盘分区</code></li><li>在<code>/home/hcq5</code>目录下，执行上述命令，可以使用VSCode连接Q5主机</li><li><code>fdisk -l</code>查看所有磁盘信息，包含未加载磁盘</li></ul><h3 id="3、无法直接运行hcq5"><a href="#3、无法直接运行hcq5" class="headerlink" title="3、无法直接运行hcq5"></a>3、无法直接运行hcq5</h3><pre><code>export QT_QPA_PLATFORM=&#39;offscreen&#39;</code></pre><blockquote><p>hcq5权限需要修改为777</p></blockquote><h3 id="4、直接运行runtime官方可执行文件"><a href="#4、直接运行runtime官方可执行文件" class="headerlink" title="4、直接运行runtime官方可执行文件"></a>4、直接运行runtime官方可执行文件</h3><ul><li>复制可执行文件<code>codesyscontrol</code>和<code>CODESYSControl.cfg</code>文件到Q5主机<code>tmp</code>路径下</li><li>执行<code>./codesyscontrol &amp;</code>，默认会使用当前路径下的<code>cfg</code>文件</li></ul><blockquote><p>扫描设备需要密码？将Q5主机 <code>/tmp/codesys/param/</code>路径下文件<code>CODESYSControl.cfg</code>复制到<code>tmp</code>路径，或者注释cfg文件内：<code>SECURITY.UserMgmtEnforce=YES</code></p></blockquote><h2 id="三、备忘录"><a href="#三、备忘录" class="headerlink" title="三、备忘录"></a>三、备忘录</h2><h3 id="1、Q0"><a href="#1、Q0" class="headerlink" title="1、Q0"></a>1、Q0</h3><pre class=" language-用户名及密码"><code class="language-用户名及密码">roothechuan13579</code></pre><pre class=" language-查看EEPROM数据"><code class="language-查看EEPROM数据">i2cdump 0 50</code></pre><h3 id="2、Q1"><a href="#2、Q1" class="headerlink" title="2、Q1"></a>2、Q1</h3><pre class=" language-用户名及密码"><code class="language-用户名及密码">roothechuan13579</code></pre><pre class=" language-CODESYS默认登陆密码"><code class="language-CODESYS默认登陆密码">AdministratorAdministrator</code></pre><p>Q1系统V6.0及以上打包文件无法使用：<code>sw-description</code>文件格式错误，缺少<code>,</code></p><h3 id="3、Q5"><a href="#3、Q5" class="headerlink" title="3、Q5"></a>3、Q5</h3><pre class=" language-默认IP"><code class="language-默认IP">192.168.88.100</code></pre><pre class=" language-用户名及密码"><code class="language-用户名及密码">roothechuan13579</code></pre><pre class=" language-系统版本"><code class="language-系统版本">cat /etc/issuecat /etc/sw-versions</code></pre><pre class=" language-应用版本"><code class="language-应用版本">cat /tmp/codesys/app-ver</code></pre><pre class=" language-备忘"><code class="language-备忘">CODESYS传文件路径 /tmp/codesys/IEC/文件存储路径 q5/userapp文件传输 scp ./hcq5 hcq5@192.168.88.100:/tmp/hcq5</code></pre><pre class=" language-指定核运行"><code class="language-指定核运行">taskset 4 hcq5 &taskset -cp 4 任务名</code></pre><pre class=" language-查看所有docker容器"><code class="language-查看所有docker容器">docker ps -a</code></pre><pre class=" language-停止所有docker容器"><code class="language-停止所有docker容器">docker stop $(docker ps -a -q)</code></pre><pre class=" language-删除所有docker容器"><code class="language-删除所有docker容器">docker rm $(docker ps -a -q)</code></pre><pre class=" language-删除指定docker"><code class="language-删除指定docker">docker rm container id</code></pre><p><a href="http://192.168.192.28/doku.php?id=hcq5-1500a:software:system:new-install">系统安装操作</a></p><p><a href="http://192.168.10.120:10000/">初次固件烧录地址</a> </p><p><a href="http://192.168.88.100:10000/">后期固件更新地址</a> </p><p><a href="http://192.168.192.28/doku.php?id=hcq5-1500a:software:system:update">CODESYS应用打包方法</a></p><p><a href="https://help.codesys.com/">CODESYS在线帮助</a></p><h2 id="四、Linux常用命令"><a href="#四、Linux常用命令" class="headerlink" title="四、Linux常用命令"></a>四、Linux常用命令</h2><pre class=" language-修改根目录"><code class="language-修改根目录">sudo chroot ./</code></pre><pre class=" language-切换到root"><code class="language-切换到root">sudo -i</code></pre><pre class=" language-移动到指定文件夹"><code class="language-移动到指定文件夹">mv file 目录</code></pre><pre class=" language-删除文件夹"><code class="language-删除文件夹">rm -rf 文件夹名称</code></pre><pre class=" language-修改权限"><code class="language-修改权限">chmod -R 777</code></pre><pre class=" language-解压SWU文件"><code class="language-解压SWU文件">cpio -idv -F tree.cpio</code></pre><pre class=" language-解压gz"><code class="language-解压gz">gzip -d xxx.gz</code></pre><pre class=" language-解压bz2"><code class="language-解压bz2">tar -jxvf xxx.tar.bz2 -C /home/user/</code></pre><pre class=" language-查看网卡配置"><code class="language-查看网卡配置">ethtool -c ecat1</code></pre><pre class=" language-修改网卡配置"><code class="language-修改网卡配置">ethtool -C ecat1 rx-usecs 0ethtool -C ecat1 tx-usecs 0</code></pre><p><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux命令大全</a></p><h2 id="五、CODESYS-EtherCAT主站相关信息"><a href="#五、CODESYS-EtherCAT主站相关信息" class="headerlink" title="五、CODESYS EtherCAT主站相关信息"></a>五、CODESYS EtherCAT主站相关信息</h2><p><a href="https://blog.csdn.net/gufuguang/article/details/119889835?spm=1001.2014.3001.5501">寻址模式参考</a></p><p><strong>扫描功能</strong></p><p>使用顺序寻址APRD指令，首先读取第一个从站（Slave Addr:0x0）0x503寄存器，当从站收到APRD包且Slave Addr为0时，该从站把数据填入数据帧，且Slave Addr及WKC均加1<br>主站收到从站返回数据（判断WKC），将从站数据取出使用，接着读取第二个从站（Slave Addr:0xffff）,数据包经过第一个从站时Slave Addr非0，不进行数据处理，将Slave Addr加1并转发到下个从站，<br>当第二个从站收到数据包，判断Slave Addr为0，将数据填入数据帧，Slave Addr及WKC加1，主站收到从站返回数据（判断WKC），继续读取剩余从站，<code>当读取到某个从站，返回数据中WKC依然为0或者没有收到返回数据时，CODESYS主站将重复发送读取从站数据包10次</code></p><h2 id="六、EtherCAT主站SOEM在Ubuntu上的移植"><a href="#六、EtherCAT主站SOEM在Ubuntu上的移植" class="headerlink" title="六、EtherCAT主站SOEM在Ubuntu上的移植"></a>六、EtherCAT主站SOEM在Ubuntu上的移植</h2><p><strong>获取源码</strong></p><p> 从<a href="http://openethercatsociety.github.io/">SOEM官网</a>下载SOEM1.3.1源码</p><p><strong>解压到/opt路径</strong></p><p>sudo tar -xzvf file.tar.bz</p><p><strong>进入到SOEM所在目录</strong></p><p>cd /opt/SOEM-1.3.1</p><p><strong>运行初始化脚本，需要ROOT权限</strong></p><p>source ./setup.sh linux</p><p><strong>编译，需要ROOT权限</strong></p><p>make all</p><p><strong>修改源代码后，需要重新执行上述两步</strong></p><p><strong>切换到指定目录</strong><br>cd /opt/SOEM-1.3.1/test/linux/simple_test</p><p><strong>运行，eno33是网卡名称，可通过ifconfig查询</strong><br>./simple_test eno33</p><p><a href="https://blog.csdn.net/ethercat_i7/article/details/52794069">移植参考</a></p><h2 id="七、Linux下的CAN接口"><a href="#七、Linux下的CAN接口" class="headerlink" title="七、Linux下的CAN接口"></a>七、Linux下的CAN接口</h2><p><a href="https://www.freesion.com/article/9859491379/">如何测试验证LINUX下的CAN接口</a></p><p><a href="https://blog.csdn.net/weixin_41579872/article/details/119426097">TX2/Linux下can总线的接收与发送命令和C程序实例</a></p><h2 id="八、CODESYSControl-cfg相关"><a href="#八、CODESYSControl-cfg相关" class="headerlink" title="八、CODESYSControl.cfg相关"></a>八、CODESYSControl.cfg相关</h2><p><strong>CmpLog：单位为字节，大小限制为5M</strong></p><pre><code>Logger.0.Name=/tmp/codesys/codesys.logLogger.0.Filter=0x0000000FLogger.0.Enable=1Logger.0.MaxEntries=1000Logger.0.MaxFileSize=5000000Logger.0.MaxFiles=1Logger.0.Backend.0.ClassId=0x00000104Logger.0.Type=0x314</code></pre><p><strong>CmpSchedule：限制负载率为95%</strong></p><pre><code>ProcessorLoad.Enable=1ProcessorLoad.Maximum=95ProcessorLoad.Interval=5000DisableOmittedCycleWatchdog=1</code></pre><p><strong>SysCom：自由协议</strong></p><pre><code>Linux.Devicefile.1=/dev/ttyS3Linux.Devicefile.2=/dev/ttyS1Linux.Devicefile.3=/dev/ttyS0</code></pre><p><strong>SysSocket</strong></p><pre><code>Adapter.0.Name=eth0Adapter.0.EnableSetIpAndMask=1Adapter.0.ipaddress=192.168.188.100Adapter.0.subnetmask=255.255.255.0Adapter.0.gateway=192.168.188.1Adapter.1.Name=eth1Adapter.1.EnableSetIpAndMask=1Adapter.1.ipaddress=192.168.88.100Adapter.1.subnetmask=255.255.255.0Adapter.1.gateway=192.168.88.1Adapter.2.Name=eth3Adapter.2.EnableSetIpAndMask=1Adapter.2.ipaddress=192.168.8.100Adapter.2.subnetmask=255.255.255.0Adapter.2.gateway=192.168.8.1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows与Linux文件互传</title>
      <link href="//post/SoftDesign-6.html"/>
      <url>//post/SoftDesign-6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.cnblogs.com/yajing-zh/p/4368748.html">互传文件</a></p><p><a href="https://www.cnblogs.com/zzgyq/p/8480674.html">主机ping不通ubuntu虚拟机的解决方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交叉编译工具链</title>
      <link href="//post/SoftDesign-5.html"/>
      <url>//post/SoftDesign-5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>严格意义上来说，嵌入式开发分为<code>微控制器</code>和<code>微处理器</code>。例如，STM32内核架构是基于ARM的Cortex-M，但是由于硬件资源有限，不具备MMU，只能运行RTOS系统（FreeRTOS、UCOSII等），通常这类主频、RAM等硬件资源有限的芯片统称为MCU（微控制器）。而基于ARM Cortex-A架构的处理器由于硬件性能比较高，同时具备MMU，可以运行裁剪后的Linu，对于这类芯片统称为SOC（微处理器）。</p><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-5/1.png" alt="嵌入式开发分类"></p><h2 id="一、交叉编译"><a href="#一、交叉编译" class="headerlink" title="一、交叉编译"></a>一、交叉编译</h2><ul><li>本地编译：在当前平台下，编译出可执行程序，可以在当前平台直接运行</li><li>交叉编译：在当前平台下编译，需要在别的平台运行，即编译平台和运行平台不同</li></ul><p><strong>为什么要用交叉编译？</strong></p><p>由于嵌入式系统资源有限，在其上进行代码的编辑和编译是一件耗时耗力的事情，通常会使用功能强大的PC配合交叉编译工具链来编辑和编译出可在ARM平台上运行的可执行程序，通过某种方式上传到目标机即可。</p><h2 id="二、交叉编译工具链构建-ARM"><a href="#二、交叉编译工具链构建-ARM" class="headerlink" title="二、交叉编译工具链构建-ARM"></a>二、交叉编译工具链构建-ARM</h2><p>交叉编译工具链有很多种，我们以在Ubuntu构建<code>arm-v7a-linux-gnueabihf.tar.bz2</code>为例，构建过程无非是解压和添加系统变量。</p><pre class=" language-步骤"><code class="language-步骤">/* 将文件移动到/usr/local */sudo mv arm-v7a-linux-gnueabihf.tar.bz2 /usr/local/* 解压 */sudo tar –jxvf arm-v7a-linux-gnueabihf.tar.bz2    /* 打开bash */sudo vim /etc/profile    /* 在打开文件的末尾添加全局变量, 完整路径*/export PATH=$PATH:/usr/local/arm-v7a-linux-gnueabihf/gcc-4.8.3-glibc-2.18-binutils-2.24-kernel-3.12-sanitized/bin    /* 使设置生效，重要步骤 */source /etc/profile/* 重启，非必要 *//* 验证，输入下方命令，按下TAB */arm-v7a-linux-gnueabihf-/* 验证,查看gcc版本信息，查看版本报错看第三节 */arm-v7a-linux-gnueabihf-gcc -v</code></pre><h2 id="三、交叉编译工具链构建-x86"><a href="#三、交叉编译工具链构建-x86" class="headerlink" title="三、交叉编译工具链构建-x86"></a>三、交叉编译工具链构建-x86</h2><pre><code>sudo apt-get install build-essentialsudo apt-get install gccsudo apt-get install g++</code></pre><h2 id="四、解决cannot-execute-binary-file-Exec-format-error-amp-No-such-file-or-directory"><a href="#四、解决cannot-execute-binary-file-Exec-format-error-amp-No-such-file-or-directory" class="headerlink" title="四、解决cannot execute binary file: Exec format error&amp;No such file or directory"></a>四、解决cannot execute binary file: Exec format error&amp;No such file or directory</h2><p>报错原因是当前系统不支持32位程序，通过<code>uname -a</code>可查看系统位数</p><h3 id="1、原生Ubuntu添加32位运行环境"><a href="#1、原生Ubuntu添加32位运行环境" class="headerlink" title="1、原生Ubuntu添加32位运行环境"></a>1、原生Ubuntu添加32位运行环境</h3><pre><code>sudo dpkg --add-architecture i386sudo apt-get updatesudo apt-get install libc6:i386sudo apt-get install lib32ncurses5 lib32ncurses5-devsudo apt-get install lib32z1</code></pre><h3 id="2、WSL添加32位运行环境"><a href="#2、WSL添加32位运行环境" class="headerlink" title="2、WSL添加32位运行环境"></a>2、WSL添加32位运行环境</h3><pre class=" language-安装QEMU"><code class="language-安装QEMU">sudo apt updatesudo apt install qemu-user-staticsudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic '\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00' --mask '\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff'</code></pre><pre class=" language-启动服务：注意每次调试32位程序之前都要启用一次"><code class="language-启动服务：注意每次调试32位程序之前都要启用一次">sudo service binfmt-support start</code></pre><pre class=" language-启动32位架构"><code class="language-启动32位架构">sudo dpkg --add-architecture i386sudo apt updatesudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OLED驱动原理及简单UI实现</title>
      <link href="//post/SoftDesign-4.html"/>
      <url>//post/SoftDesign-4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大部分嵌入式产品，会使用不同类型的显示屏用做<code>HMI（人机界面）</code>，使用最多的是<code>LCD</code>和<code>OLED</code>，<a href="https://www.zhihu.com/question/22263252">点击这里深入了解两者的区别</a>。本文讨论的对象是一款被众多电子爱好者使用的<code>0.96寸OLED</code>。</p><h2 id="一、初识OLED"><a href="#一、初识OLED" class="headerlink" title="一、初识OLED"></a>一、初识OLED</h2><p>OLED即有机发光二极管，具备自发光、高对比度、视角广、</p><h2 id="二、软件实现"><a href="#二、软件实现" class="headerlink" title="二、软件实现"></a>二、软件实现</h2>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈IIC总线通信原理及软件实现</title>
      <link href="//post/SoftDesign-3.html"/>
      <url>//post/SoftDesign-3.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在数字通信应用领域，<code>IIC（Inter-Integrated Circuit）</code>和SPI<code>（Serial Peripheral Interface）</code>是不得不谈的两种标准通信协议。本文将从基本概念、软件实现、波形分析三个方面带你深入了解IIC总线通信原理。</p><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-IIC从哪里来"><a href="#1-IIC从哪里来" class="headerlink" title="1. IIC从哪里来"></a>1. IIC从哪里来</h3><p>最初的嵌入式系统是使用内存映射(memory-mapped I/O)的方式来互联微控制器和外围设备，要实现内存映射，设备必须并联入微控制器的数据线和地址线，这种方式在连接多个外设时需大量线路和额外地址解码芯片，很不方便并且成本高。</p><p>1982年，位于荷兰的飞利浦实验室开发了IIC，一种只使用二根线接连所有外围芯片的总线协议。最初的标准定义总线速度为100kbps，经历几次修订，主要是1995年的400kbps，1998的3.4Mbps。</p><blockquote><p>2006年，飞利浦半导体转移为恩智浦半导体。</p></blockquote><h3 id="2-IIC是什么"><a href="#2-IIC是什么" class="headerlink" title="2. IIC是什么"></a>2. IIC是什么</h3><h2 id="二、软件实现"><a href="#二、软件实现" class="headerlink" title="二、软件实现"></a>二、软件实现</h2><blockquote><p>适当减小或取消延时函数、采用寄存器操作，可以提高通信速率</p></blockquote><pre class=" language-i2c.c"><code class="language-i2c.c">#include "i2c.h"#include "delay.h"/**  @brief  初始化  */void i2cInit(void)&#123;    GPIO_InitTypeDef GPIO_InitStruct = &#123;0&#125;;    __HAL_RCC_GPIOA_CLK_ENABLE();    GPIO_InitStruct.Pin = SCL_Pin | SDA_Pin;    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;    GPIO_InitStruct.Pull = GPIO_NOPULL;    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);    HAL_GPIO_WritePin(GPIOB, SCL_Pin | SDA_Pin, GPIO_PIN_SET); // 在模拟i2c之前，需要将SDA、SCL引脚置高&#125;/**  @brief  开始信号  */void i2cStart(void)&#123;    SDA_OUT();    SDA_H;    SCL_H;    #if FAST_SPEED    sysDelayUs(1);    #endif    SDA_L;    #if FAST_SPEED    sysDelayUs(1);    #endif    SCL_L;&#125;/**  @brief  停止信号  */void i2cStop(void)&#123;    SDA_OUT();    SCL_L;    SDA_L;    #if FAST_SPEED    sysDelayUs(1);    #endif    SCL_H;    SDA_H;    #if FAST_SPEED    sysDelayUs(1);    #endif&#125;/**  @brief  产生应答信号  */void i2cAck(void)&#123;    SCL_L;    SDA_OUT();    SDA_L;    #if FAST_SPEED    sysDelayUs(1);    #endif    SCL_H;    #if FAST_SPEED    sysDelayUs(1);    #endif    SCL_L;&#125;/**  @brief  不产生应答信号  */void i2cNoAck(void)&#123;    SCL_L;    SDA_OUT();    SDA_H;    #if FAST_SPEED    sysDelayUs(1);    #endif    SCL_H;    #if FAST_SPEED    sysDelayUs(1);    #endif    SCL_L;&#125;/**  @brief  等待应答信号  */u8 i2cWaitAck(void)&#123;    u8 ucTemp = 0;    SDA_H; // SDA切换为输入前，先将SDA置高，当有ACK返回时，可以清晰看到ACK信号    SDA_IN();    #if FAST_SPEED    sysDelayUs(1);    #endif    SCL_H;    #if FAST_SPEED    sysDelayUs(1);    #endif    while (SDA_READ)    &#123;        ucTemp++;        if (ucTemp > 250)        &#123;            i2cStop();            return 1;        &#125;    &#125;    SCL_L;    return 0;&#125;/**  @brief  写一个字节  @param  ucBuf:数据  */void i2cWriteByte(u8 ucBuf)&#123;    u8 i;    SDA_OUT();    SCL_L;    for (i = 0; i < 8; i++)    &#123;        if ((ucBuf & 0x80) >> 7)            SDA_H;        else            SDA_L;        ucBuf <<= 1;        #if FAST_SPEED        sysDelayUs(1);        #endif        SCL_H;        #if FAST_SPEED        sysDelayUs(1);        #endif        SCL_L;        #if FAST_SPEED        sysDelayUs(1);        #endif    &#125;&#125;/**  @brief  读一个字节  @param  ucAck:是否发送ACK信号  */u8 i2cReadByte(u8 ucAck)&#123;    u8 ucTemp = 0, i;    SDA_IN();    for (i = 0; i < 8; i++)    &#123;        SCL_L;        #if FAST_SPEED        sysDelayUs(1);        #endif        SCL_H;        ucTemp <<= 1;        if (SDA_READ)            ucTemp++;        #if FAST_SPEED        sysDelayUs(1);        #endif    &#125;    if (!ucAck)        i2cNoAck();    else        i2cAck();    return ucTemp;&#125;</code></pre><pre class=" language-i2c.h"><code class="language-i2c.h">#ifndef __I2C_H#define __I2C_H#include "main.h"/* 延时开关，取消延时函数可以提高通信速率，相应会降低通信稳定性 */#define FAST_SPEED      1/* SDA输入模式 */#define SDA_IN()                  \    &#123;                             \        GPIOB->CRH &= 0XFFFFFF0F; \        GPIOB->CRH |= 8 << 4;     \    &#125;/* SDA输出模式 */#define SDA_OUT()                 \    &#123;                             \        GPIOB->CRH &= 0XFFFFFF0F; \        GPIOB->CRH |= 3 << 4;     \    &#125;/* 寄存器操作，提高通信速率 */#define SCL_H SCL_GPIO_Port->ODR |= SCL_Pin#define SCL_L SCL_GPIO_Port->ODR &= ~SCL_Pin#define SDA_H SDA_GPIO_Port->ODR |= SDA_Pin#define SDA_L SDA_GPIO_Port->ODR &= ~SDA_Pin#define SDA_READ SDA_GPIO_Port->IDR & SDA_Pin/**  @brief  初始化  */void i2cInit(void);    /**  @brief  开始信号  */void i2cStart(void);    /**  @brief  停止信号  */void i2cStop(void);/**  @brief  等待应答信号  */u8 i2cWaitAck(void);/**  @brief  写一个字节  @param  ucBuf:数据  */void i2cWriteByte(u8 ucBuf);/**  @brief  读一个字节  @param  ucAck:是否发送ACK信号  */u8 i2cReadByte(u8 ucAck);#endif</code></pre><h2 id="三、波形分析"><a href="#三、波形分析" class="headerlink" title="三、波形分析"></a>三、波形分析</h2><pre class=" language-波形函数原型"><code class="language-波形函数原型">/**  @brief  指定地址读一个数据  @param  ucAdd:地址  */u8 i2cReadAdd(u8 ucAdd)&#123;    u8 ucTemp = 0;    i2cStart();    i2cWriteByte(0XA0);    i2cWaitAck();    i2cWriteByte(ucAdd);    i2cWaitAck();    i2cStart();    i2cWriteByte(0XA1);    i2cWaitAck();    ucTemp = i2cReadByte(0xff);    i2cStop();    return ucTemp;&#125;</code></pre><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-3/2.png" alt="总体波形"></p><pre class=" language-波形函数原型"><code class="language-波形函数原型">i2cStart();i2cWriteByte(0XA0);i2cWaitAck();</code></pre><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-3/3.png" alt="总体波形"></p><pre class=" language-波形函数原型"><code class="language-波形函数原型">i2cWriteByte(ucAdd);i2cWaitAck();</code></pre><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-3/4.png" alt="总体波形"></p><pre class=" language-波形函数原型"><code class="language-波形函数原型"> i2cStart(); i2cWriteByte(0XA1); i2cWaitAck();</code></pre><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-3/5.png" alt="总体波形"></p><pre><code>ucTemp = i2cReadByte(0xff);i2cStop();</code></pre><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-3/6.png" alt="总体波形"></p><blockquote><p>无ACK应答时的波形</p></blockquote><p><img src="https://itatboy.github.io//image/SoftDesign/SoftDesign-3/1.png" alt="总体波形"></p>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延时函数的多种实现方法</title>
      <link href="//post/SoftDesign-2.html"/>
      <url>//post/SoftDesign-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>嵌入式软件开发过程中，<code>延时函数</code>有着至关重要的作用，比如LED闪烁、等待用户输入等应用场景。延时分为<code>阻塞延时</code>和<code>非阻塞延时</code>，这里举个例子说明阻塞/非阻塞：</p><p><code>你正在兴致勃勃的观看英雄联盟全球总决赛，这时候你妈妈让你去烧开水，电视在客厅，烧水壶在厨房，你恋恋不舍起身去厨房烧开水，这时候你有两种选择：</code></p><ul><li><code>第一种（阻塞）：老老实实在厨房等水烧开，然后返回客厅继续看决赛，有可能决赛已经结束</code></li><li><code>第二种（非阻塞）：把水烧上，返回客厅看决赛，隔几分钟去厨房看看，随之而来的问题是，水开了你没有及时关掉燃气，沸腾的水撒了一地，你只有等着挨屁屁。</code></li></ul><p>从效果上看，阻塞和非阻塞都没有完美的解决看电视和烧水的问题，而非阻塞相比阻塞，更加的灵活，不至于烧水的这段时间你只能守在旁边，如果返回厨房看的时间由几分钟变为几秒钟，在感觉水即将要开的时候在厨房等待水开，关掉燃气，这样就可以避免妈见打的情况，但是这样你会很累。有没有更好的解决方法？有，这就涉及到<code>同步</code>和<code>异步</code>的问题了，由于不是本文讨论的重点，暂且略过。</p><h2 id="一、阻塞延时"><a href="#一、阻塞延时" class="headerlink" title="一、阻塞延时"></a>一、阻塞延时</h2><p>基于微控制器的阻塞延时函数实现方法有很多，主要分类为<code>粗略延时</code>和<code>精确延时</code>。</p><h3 id="1-粗略延时"><a href="#1-粗略延时" class="headerlink" title="1. 粗略延时"></a>1. 粗略延时</h3><p>粗略延时的实现非常简单，原理是让微控制在while循环内执行无关紧要的代码，执行次数与微控制器频率有关。</p><pre class=" language-粗略延时"><code class="language-粗略延时">/*  @brief  微秒级延时  @param ulTime：微秒*/void sysDelayUs(u32 ulTime)&#123;        u16 i = 0;      while(ulTime--)    &#123;        i = 10; // 该值与微控制器频率有关        while(i--);        &#125;&#125;/*  @brief  毫秒级延时  @param ulTime：毫秒*/void sysDelayMs(u32 ulTime)&#123;        u16 i = 0;      while(ulTime--)    &#123;        i = 12000; // 该值与微控制器频率有关        while(i--);        &#125;&#125;</code></pre><h3 id="2-精确延时"><a href="#2-精确延时" class="headerlink" title="2. 精确延时"></a>2. 精确延时</h3><p>精确延时通常应用在对时间精度要求较高的场景中，软件开发应尽量选择精确延时使程序可靠可控。大部分微控制器都具有丰富的外设资源可用作精确延时，例如STM32的SysTick、TIM和DWT外设。</p><h4 id="2-1-SysTick延时"><a href="#2-1-SysTick延时" class="headerlink" title="2.1 SysTick延时"></a>2.1 SysTick延时</h4><p>SysTick即系统滴答定时器，是一个24位的向下递减计数器，SysTick从重装载值递减至零，在下一个时钟边缘重新加载LOAD寄存器中的值，继续递减。</p><table><thead><tr><th>地址</th><th>名称</th><th>类型</th><th>复位值</th><th>备注</th></tr></thead><tbody><tr><td>0xE000E010</td><td>STK_CTRL</td><td>RW</td><td>0x00000000</td><td>控制与状态寄存器</td></tr><tr><td>0xE000E014</td><td>STK_LOAD</td><td>RW</td><td>Unknown</td><td>重装载值寄存器</td></tr><tr><td>0xE000E018</td><td>STK_VAL</td><td>RW</td><td>Unknown</td><td>当前值寄存器</td></tr><tr><td>0xE000E01C</td><td>STK_CALIB</td><td>RO</td><td>0xC0000000</td><td>校准值寄存器</td></tr></tbody></table><blockquote><p>关于SysTick可查阅《Cortex-M3 权威指南》</p></blockquote><p>基于SysTick实现延时函数的方式有多种：</p><ul><li><strong>中断方式</strong>：让SysTick间隔一定时间触发中断，在中断时间内进行递减，该方式会占用SysTick。</li></ul><pre><code>//代码待补充</code></pre><ul><li><strong>计数方式</strong>：设置重装载值，开启SysyTIck定时器，该方式会占用SysTick。</li></ul><pre><code>//代码待补充</code></pre><ul><li><strong>查询方式</strong>：延时前记录下SysTick的值，累计计数值，不断与目标值比较，推荐。</li></ul><pre class=" language-delay.C"><code class="language-delay.C">#include "delay.h"/*  @brief  微秒级延时  @param  ulTime：微秒*/void sysDelayUs(u32 ulTime)&#123;    u32 ulLoad, ulTick, ulCnt = 0;    u32 ulOld, ulNow;    if (ulTime > 1000)    &#123;        sysDelayMs(ulTime / 1000);        ulTime = ulTime % 1000;    &#125;    ulLoad = SysTick->LOAD; // 重装载值    ulTick = ulTime * SYS_FRE; // 需要的节拍数    ulOld = SysTick->VAL;    while (1)    &#123;        ulNow = SysTick->VAL;        if (ulNow != ulOld)        &#123;            if (ulNow < ulOld)                ulCnt += ulOld - ulNow;            else                ulCnt += ulLoad - ulNow + ulOld;            ulOld = ulNow;            if (ulCnt >= ulTick)                break;        &#125;    &#125;;&#125;/*  @brief  毫秒级延时  @param  ulTime：毫秒*/void sysDelayMs(u32 ulTime)&#123;    while(ulTime--)    &#123;        sysDelayUs(1000);    &#125;&#125;</code></pre><pre class=" language-delay.h"><code class="language-delay.h">#ifndef __DELAY_H#define __DELAY_H#include "main.h"#define SYS_FRE 72 //SysTick频率/**  @brief  微秒级延时  @param  ulTime:微秒  */void sysDelayUs(u32 ulTime);/**  @brief  毫秒级延时  @param  ulTime:毫秒  */void sysDelayMs(u32 ulTime);#endif</code></pre><h4 id="2-2-DWT"><a href="#2-2-DWT" class="headerlink" title="2.2 DWT"></a>2.2 DWT</h4><p>在复杂项目中，通常会引入操作系统进行任务调度管理，而操作系统会占用SysTick作为系统节拍（时基1ms到10ms不等），因此SysTick无法被用来实现延时函数。</p><p>DWT即系统调试及跟踪，它有一个向上计数的32位寄存器CYCCNT，记录的是内核时钟运行的个数，内核时钟跳动一次，该计数器就加1，当CYCCNT溢出之后，会清0重新开始向上计数。</p><pre class=" language-delay.c"><code class="language-delay.c">#include "delay.h"/*  @brief  延时初始化，使用DWT延时，程序下载后不能自动运行，需要手动复位或上下电*/void sysDelayInit(void)&#123;    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // 失能DWT    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 使能DWT    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; // 失能CTRL    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // 使能CTRL    DWT->CYCCNT = 0; // 重置计数器值&#125;/*  @brief  微秒级延时  @param ulTime：微秒*/void sysDelayUs(u32 ulTime)&#123;    u32 clk_cycle_start = DWT->CYCCNT;    ulTime *= (HAL_RCC_GetHCLKFreq() / 1000000); // 计算总计数值    while ((DWT->CYCCNT - clk_cycle_start) < ulTime); // 等待延时结束&#125;/*  @brief  毫秒级延时  @param ulTime：毫秒*/void sysDelayMs(u32 ulTime)&#123;    while(ulTime--)    &#123;        sysDelayUs(1000);    &#125;&#125;</code></pre><pre class=" language-delay.h"><code class="language-delay.h">#ifndef __DELAY_H#define __DELAY_H#include "main.h" /*  @brief  延时初始化，使用DWT延时，程序下载后不能自动运行，需要手动复位或上下电*/void sysDelayInit(void); /*  @brief  微秒级延时  @param  ulTime：微秒*/void sysDelayUs(u32 ulTime);/*  @brief  毫秒级延时  @param  ulTime：毫秒*/void sysDelayMs(u32 ulTime);#endif</code></pre><h2 id="二、非阻塞延时"><a href="#二、非阻塞延时" class="headerlink" title="二、非阻塞延时"></a>二、非阻塞延时</h2><pre class=" language-C"><code class="language-C">#define TIME_AFTER(now, pre, timeout) ((uint32_t)(now) - (uint32_t)(pre) >= timeout)static u32 ulTimerCnt = 0;/* 1000ms检测一次 */if(TIME_AFTER(sysTimGet(SYS_TICK), ulTimerCnt, 1000))&#123;    ulTimerCnt = sysTimGet(SYS_TICK);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于VMware安装Ubuntu</title>
      <link href="//post/IDE-4.html"/>
      <url>//post/IDE-4.html</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">清华大学开源软件镜像站-Ubuntu</a></p><p><a href="http://mirrors.163.com/ubuntu-releases/">网易开源镜像站-Ubuntu</a></p><p><code>i386</code>为32位系统，<code>amd64</code>为64位系统，<code>desktop</code>为图形界面，<code>server</code>为命令行版本</p><p><a href="https://blog.csdn.net/xueerkeji/article/details/120697361">实装Ubuntu server16.04参考</a></p><p><a href="https://blog.csdn.net/weixin_42529544/article/details/112442336">网络配置参考</a></p><h2 id="一、VMware创建虚拟机"><a href="#一、VMware创建虚拟机" class="headerlink" title="一、VMware创建虚拟机"></a>一、VMware创建虚拟机</h2><blockquote><p>创建过程不再记录，注意设置<code>系统存放位置</code>，<code>处理器配置</code>，<code>硬盘大小</code>，创建完成后，在<code>编辑虚拟机设置</code>-&gt;<code>CD/DVD</code>选择ISO文件，<code>开启此虚拟机</code>即可开始安装。</p></blockquote><h2 id="二、Ubuntu-16-安装"><a href="#二、Ubuntu-16-安装" class="headerlink" title="二、Ubuntu 16 安装"></a>二、Ubuntu 16 安装</h2><p><img src="https://itatboy.github.io//image/IDE/IDE-4/1.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/2.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/3.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/4.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/5.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/6.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/7.png" alt="安装"></p><blockquote><p>安装完成后，重启即可。</p></blockquote><h2 id="三、Ubuntu-20-安装"><a href="#三、Ubuntu-20-安装" class="headerlink" title="三、Ubuntu 20 安装"></a>三、Ubuntu 20 安装</h2><p><img src="https://itatboy.github.io//image/IDE/IDE-4/8.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/9.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/10.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/11.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/12.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/13.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/14.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/15.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/16.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/17.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/18.png" alt="安装"></p><p><img src="https://itatboy.github.io//image/IDE/IDE-4/19.png" alt="安装"></p><blockquote><p>安装完成后，重启即可。</p></blockquote><h2 id="四、实用设置"><a href="#四、实用设置" class="headerlink" title="四、实用设置"></a>四、实用设置</h2><h3 id="1、全屏显示-amp-复制粘贴"><a href="#1、全屏显示-amp-复制粘贴" class="headerlink" title="1、全屏显示&amp;复制粘贴"></a>1、全屏显示&amp;复制粘贴</h3><ul><li><p><strong>更新软件源</strong></p><pre><code>sudo apt update</code></pre></li><li><p><strong>安装open-vm-tools-desktop</strong></p><pre><code>sudo apt-get install open-vm-tools-desktop</code></pre></li><li><p><strong>重启生效</strong></p></li></ul><h3 id="2、设置root密码"><a href="#2、设置root密码" class="headerlink" title="2、设置root密码"></a>2、设置root密码</h3><pre><code>sudo passwd root</code></pre><h3 id="3、切换清华源"><a href="#3、切换清华源" class="headerlink" title="3、切换清华源"></a>3、切换清华源</h3><p><img src="https://itatboy.github.io//image/IDE/IDE-4/20.png" alt="换源"></p><h3 id="4、设置中文输入法-推荐谷歌输入法"><a href="#4、设置中文输入法-推荐谷歌输入法" class="headerlink" title="4、设置中文输入法 推荐谷歌输入法"></a>4、设置中文输入法 推荐谷歌输入法</h3><p><a href="https://blog.csdn.net/jiangchao3392/article/details/73650710">参考链接</a></p><h3 id="5、开启SSH"><a href="#5、开启SSH" class="headerlink" title="5、开启SSH"></a>5、开启SSH</h3><pre class=" language-检查是否开启SSH服务"><code class="language-检查是否开启SSH服务">ps -e|grep ssh</code></pre><blockquote><p>ssh-agent：ssh-client启动，sshd：ssh-server启动。</p></blockquote><pre class=" language-安装SSH"><code class="language-安装SSH">sudo apt-get install ssh</code></pre><blockquote><p>也可以使用命令安装客户端<code>sudo apt-get install openssh-client</code>，服务端<code>sudo apt-get install openssh-server</code></p></blockquote><pre class=" language-启动SSH"><code class="language-启动SSH">sudo /etc/init.d/ssh start</code></pre><h3 id="6、安装GCC"><a href="#6、安装GCC" class="headerlink" title="6、安装GCC"></a>6、安装GCC</h3><pre><code>sudo apt-get install build-essential</code></pre><h3 id="7、支持exFAT格式"><a href="#7、支持exFAT格式" class="headerlink" title="7、支持exFAT格式"></a>7、支持exFAT格式</h3><pre><code>sudo apt-get install exfat-utils</code></pre><h3 id="8、访问Windows共享文件夹"><a href="#8、访问Windows共享文件夹" class="headerlink" title="8、访问Windows共享文件夹"></a>8、访问Windows共享文件夹</h3><pre><code>sudo apt-get install samba</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派-1：操作系统安装及基本配置</title>
      <link href="//post/RPI-1.html"/>
      <url>//post/RPI-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p><a href="https://www.raspberrypi.org/">树莓派官网</a><br><a href="https://blog.csdn.net/Brouce__Lee/article/details/105045991">树莓派各系列对比</a><br><a href="https://blog.csdn.net/weixin_44908159/article/details/107400626">参考教程</a></p><p>通常新购买的树莓派是没有安装操作系统的（购买已安装操作系统的SD卡的除外），我们上手第一步就是为树莓派选择安装一个合适的操作系统。</p><h2 id="一、安装工具"><a href="#一、安装工具" class="headerlink" title="一、安装工具"></a>一、安装工具</h2><p><a href="https://www.raspberrypi.org/software/">Raspberry Pi Imager </a>是官方推出的一款树莓派操作系统安装工具，使用它可以快速便捷的为树莓派安装系统。打开工具下载页面，选择相应版本，下载安装后备用。</p><blockquote><p>注：<a href="https://win32diskimager.download/">Win32DiskImager</a> 和 <a href="https://www.balena.io/etcher/">balena-etcher </a>是同样优秀的系统安装工具，感兴趣的可以尝试。</p></blockquote><p><img src="https://itatboy.github.io//image/RPI/RPI-1/1.png" alt="图1"></p><h2 id="二、操作系统"><a href="#二、操作系统" class="headerlink" title="二、操作系统"></a>二、操作系统</h2><p><a href="https://www.raspberrypi.org/software/operating-systems/">Raspberry Pi OS </a>是树莓派官方发布维护的完全支持树莓派硬件的操作系统，共有三个版本：第一个是带图形界面和常用软件的版本，第二个是带图形界面不带常用软件的版本，第三个是命令行版本。新手建议选择带图形界面和常用软件的版本，使用起来比较友好。选择对应版本下载即可（可视网络状况选择直接下载或通过种子下载）。</p><blockquote><p>注：除了Raspberry Pi OS，还有一些<a href="https://www.raspberrypi.org/software/operating-systems/">操作系统</a>可供选择，有兴趣的可以了解。</p></blockquote><p><img src="https://itatboy.github.io//image/RPI/RPI-1/2.png" alt="图2"></p><h2 id="三、写入系统"><a href="#三、写入系统" class="headerlink" title="三、写入系统"></a>三、写入系统</h2><p>使用Raspberry Pi Imager 为<code>SD卡</code>写入操作系统，打开Raspberry Pi Imager，选择<code>CHOOSE OS</code>，选择最后的<code>Use custom</code>，选择下载的zip系统文件后点击<code>open</code>。选择<code>CHOOSE STOPAGE</code>，选择指定SD卡，点击<code>WRITE</code>即可开始烧写。等待烧写完成即可拔出SD卡。</p><blockquote><p>注：SD卡需为FAT格式，全新SD卡不需要重新格式化，普通SD卡可以通过右键格式化，安装过系统的SD卡可以使用<a href="https://pan.baidu.com/s/1x7cDbM04RoELOL-9mxDQsw"><code>SDFormatter</code></a>格式化，点击名称可下载，提取码<code>ve5b</code>。</p></blockquote><p><img src="https://itatboy.github.io//image/RPI/RPI-1/3.gif" alt="图3"></p><h2 id="四、开启SSH"><a href="#四、开启SSH" class="headerlink" title="四、开启SSH"></a>四、开启SSH</h2><p>打开上述写入操作系统的SD卡，在根目录创建一个名称为<code>ssh</code>的文件，内容为空，删除后缀名。</p><h2 id="五、配置网络"><a href="#五、配置网络" class="headerlink" title="五、配置网络"></a>五、配置网络</h2><p>网络连接方式分为<code>有线连接</code>和<code>无线连接</code>。</p><ul><li><strong>有线连接</strong><br>将上述写入操作系统的SD卡插入树莓派，并使用网线连接树莓派和路由器，开启电源。</li><li><strong>无线连接</strong><br>打开上述写入操作系统的SD卡，在根目录创建一个名称为<code>wpa_supplicant.conf</code>的文件，内容如下：<pre class=" language-c"><code class="language-c"> country<span class="token operator">=</span>CN ctrl_interface<span class="token operator">=</span>DIR<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>wpa_supplicant GROUP<span class="token operator">=</span>netdev update_config<span class="token operator">=</span><span class="token number">1</span>  network<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> ssid<span class="token operator">=</span><span class="token string">"name"</span> psk<span class="token operator">=</span><span class="token string">"12345678"</span> key_mgmt<span class="token operator">=</span>WPA<span class="token operator">-</span>PSK priority<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>注：<code>ssid</code>为无线名称，<code>psk</code>为无线密码，后缀名为<code>conf</code>。完成后，将SD卡插入树莓派，开启电源。</p></blockquote><h2 id="六、开启VNC"><a href="#六、开启VNC" class="headerlink" title="六、开启VNC"></a>六、开启VNC</h2></li></ul><p>开启VNC需要在树莓派终端操作，在开始一切操作之前，需要获取树莓派的<code>IP</code>地址。获取方法不再记录，通常可以在路由器后台得到。<br>获取<code>IP</code>地址后，使用全能终端工具<a href="https://mobaxterm.mobatek.net/"><code>MobaXterm</code></a>登录树莓派后台。默认用户：<code>pi</code>，默认密码：<code>raspberry</code>。</p><p><img src="https://itatboy.github.io//image/RPI/RPI-1/4.gif" alt="图4"><br>登陆后界面如下：</p><p><img src="https://itatboy.github.io//image/RPI/RPI-1/5.png" alt="图5"><br>进入配置界面</p><pre class=" language-C"><code class="language-C">sudo raspi-config</code></pre><p>选择<code>Interface Options</code>并回车，选择<code>VNC</code>并回车，选择<code>yes</code>并回车，选择<code>OK</code>并回车。至此VNC已经开启，要想通过VNC远程树莓派，还需要进行显示配置。在<code>raspi-config</code>主菜单，选择<code>Display Options</code>并回车，选择<code>Resolution</code>并回车，选择<code>合适的分辨率</code>并回车，选择<code>ok</code>并回车，最后选择<code>Finish</code>保存，会提示是否重启，选择<code>yes</code>，等待重启完成即可通过VNC登录远程桌面。</p><p><img src="https://itatboy.github.io//image/RPI/RPI-1/6.gif" alt="图6"></p><blockquote><p>注：<a href="https://www.realvnc.com/en/connect/download/viewer/"><code>VNC (Virtual Network Console)</code></a>是虚拟网络控制台的缩写，是一款优秀的远程控制工具软件。</p></blockquote><p><img src="https://itatboy.github.io//image/RPI/RPI-1/7.gif" alt="图7"><br>至此，树莓派系统安装及配置已经完成，接下来就是愉快的项目实操了，吹吹板子上的灰动手吧！</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式软件开发编码规范</title>
      <link href="//post/SoftDesign-1.html"/>
      <url>//post/SoftDesign-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="规范目的"><a href="#规范目的" class="headerlink" title="规范目的"></a>规范目的</h2><h2 id="一、规范目的"><a href="#一、规范目的" class="headerlink" title="一、规范目的"></a>一、规范目的</h2><p>描述嵌入式软件开发流程中，代码编写及命名规则，有利于项目开发和维护，增强可读性、规范性、复用性。</p><h2 id="二、变量命名"><a href="#二、变量命名" class="headerlink" title="二、变量命名"></a>二、变量命名</h2><table><thead><tr><th>变量类型</th><th>前缀</th><th>举例</th><th>重定义类型</th></tr></thead><tbody><tr><td>char</td><td>c</td><td>char cLength;</td><td>int8_t</td></tr><tr><td>short</td><td>s</td><td>short sLength;</td><td>int16_t</td></tr><tr><td>int</td><td>i</td><td>int iLength;</td><td>int32_t</td></tr><tr><td>long</td><td>l</td><td>long lLength;</td><td>int64_t</td></tr><tr><td>unsigned char</td><td>uc</td><td>unsigned char ucLength;</td><td>uint8_t</td></tr><tr><td>unsigned short</td><td>us</td><td>unsigned short usLength;</td><td>uint16_t</td></tr><tr><td>unsigned int</td><td>ui</td><td>unsigned int uiLength;</td><td>uint32_t</td></tr><tr><td>unsigned long</td><td>ul</td><td>unsigned long ulLength;</td><td>uint64_t</td></tr><tr><td>bool</td><td>b 或 is</td><td>bool bLength;</td><td></td></tr><tr><td>float</td><td>f</td><td>float fLength;</td><td></td></tr><tr><td>double float</td><td>d</td><td>double float dLength;</td><td></td></tr><tr><td>枚举</td><td>e</td><td>enum eLENGTH;</td><td></td></tr><tr><td>结构体</td><td>str</td><td>INFO strLength;</td><td></td></tr><tr><td>指针</td><td>p</td><td>char* pLength;</td><td></td></tr><tr><td>结构体指针</td><td>pstr</td><td>INFO* pstrLength;</td><td></td></tr><tr><td>结构体数组</td><td>astr</td><td>INFO astrLength[];</td><td></td></tr><tr><td>数组</td><td>a</td><td>char aLength[];</td><td></td></tr></tbody></table><blockquote><p>全局变量前加 g，例如全局结构体：gSysInfo;<br><strong>结构体示例</strong></p></blockquote><pre><code>/* 缓存队列数据结构 */typedef struct _UARTQUEUE&#123;    uint16_t usHead;    uint16_t usTail;    uint16_t usLenght;    uint16_t ucBuff[UARTBUFF_LEN * 2 + 2];&#125; UARTQUEUE;</code></pre><h2 id="三、函数命名"><a href="#三、函数命名" class="headerlink" title="三、函数命名"></a>三、函数命名</h2><h2 id="四、排版"><a href="#四、排版" class="headerlink" title="四、排版"></a>四、排版</h2><p><strong>缩进</strong></p><blockquote><p>缩进使用制表符，一个制表符等于4个空格。</p></blockquote><h2 id="五、注释"><a href="#五、注释" class="headerlink" title="五、注释"></a>五、注释</h2><p><strong>单行注释</strong></p><blockquote><p>在语句末尾添加，空格后输入单行注释符 <kbd>//</kbd>，注释符号空格后输入注释文。</p></blockquote><pre class=" language-C"><code class="language-C">sysDelayms(1000); // 延时1000毫秒</code></pre><p><strong>多行注释</strong></p><blockquote><p>在功能块前添加，使用多行注释符<kbd>/**/</kbd>，注释文前后各空一格。</p></blockquote><pre class=" language-C"><code class="language-C">/* 满足条件时清空值 */if(ucFlag)&#123;    ucValue = 0;&#125;</code></pre><p><strong>函数注释</strong></p><blockquote><p> 在函数前添加，示例如下</p></blockquote><pre class=" language-C"><code class="language-C">/**  * @brief 发送数据  * @param ucComID:端口号  * @param *pData:数据  * @param ucLength:长度  * @return 错误代码  */int sysComSend(uint8_t ucComID, uint8_t *pData, uint16_t usLength)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 编码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git安装及基本操作</title>
      <link href="//post/IDE-3.html"/>
      <url>//post/IDE-3.html</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p><a href="https://www.runoob.com/git/git-tutorial.html">Git教程</a></p><p><a href="https://git-scm.com/downloads">Git下载</a></p><p><a href="https://www.cnblogs.com/xiaohualu/p/9858731.html">git上的分支命名规范</a></p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1、GUI"><a href="#1、GUI" class="headerlink" title="1、GUI"></a>1、GUI</h3><blockquote><p>安装过程比较简单，只需要选择安装目录，其余选项默认即可。</p></blockquote><h3 id="2、命令行"><a href="#2、命令行" class="headerlink" title="2、命令行"></a>2、命令行</h3><pre><code>sudo apt install git</code></pre><h2 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h2><ul><li><p><strong>设置name</strong></p><pre><code>git config --global user.name name</code></pre></li><li><p><strong>设置email</strong></p><pre><code>git config --global user.email email</code></pre></li><li><p><strong>查看用户信息</strong></p><pre><code>git config --list</code></pre></li><li><p><strong>生成密钥对</strong></p><pre><code>ssh-keygen</code></pre><p>  带邮箱信息<code>ssh-keygen -t rsa -C email</code>，github不再支持rsa，使用<code>ssh-keygen -t ed25519</code></p></li><li><p><strong>查看公钥内容</strong></p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre></li><li><p><strong>克隆仓库</strong></p><pre><code>git clone url</code></pre></li><li><p><strong>克隆develop分支仓库</strong></p><pre><code>git clone -b develop url</code></pre></li><li><p><strong>添加所有文件到暂存区</strong></p><pre><code>git add .</code></pre></li><li><p><strong>提交到仓库</strong></p><pre><code>git commit -m &quot;&quot;</code></pre></li><li><p><strong>推送到远程仓库</strong></p><pre><code>git push</code></pre></li><li><p><strong>从远程仓库拉取</strong></p><pre><code>git pull</code></pre></li><li><p><strong>切换到develop分支</strong></p><pre><code>git checkout -b develop</code></pre></li></ul><h2 id="三、设置Git走SSR代理"><a href="#三、设置Git走SSR代理" class="headerlink" title="三、设置Git走SSR代理"></a>三、设置Git走SSR代理</h2><pre class=" language-SSR-设置"><code class="language-SSR-设置">git config --global http.proxy http://127.0.0.1:1080git config --global https.proxy http://127.0.0.1:1080</code></pre><pre class=" language-V2ray-设置"><code class="language-V2ray-设置">git config --global http.proxy 'socks5://127.0.0.1:10808'git config --global https.proxy 'socks5://127.0.0.1:10808'</code></pre><pre class=" language-取消"><code class="language-取消">git config --global --unset http.proxygit config --global --unset https.proxy</code></pre><pre class=" language-查询代理设置"><code class="language-查询代理设置">git config --global --list</code></pre><blockquote><p>注意确认本地代理的IP地址和端口，通常是127.0.0.1:1080</p></blockquote><ul><li><p>无法取消代理</p><p>显示电脑隐藏文件，用户文件夹找到并打开<code>.gitconfig</code>，然后把里面的代理proxy整行删掉</p></li><li><p>Github提交未计入统计数据</p><p>修改<code>.gitconfig</code>，设置与Github相同的用户名和邮箱</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js环境配置</title>
      <link href="//post/IDE-1.html"/>
      <url>//post/IDE-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p><a href="http://nodejs.cn/">Node.js中文官网</a><br><a href="https://www.cnblogs.com/vfuy/p/14008507.html">安装参考教程</a><br><a href="https://blog.csdn.net/weixin_44523860/article/details/104119488">vscode运行TS参考教程</a></p><h2 id="一、zip方式安装"><a href="#一、zip方式安装" class="headerlink" title="一、zip方式安装"></a>一、zip方式安装</h2><ul><li><strong>下载</strong><br>点击<a href="https://nodejs.org/en/">Node.js</a>进入官网，选择<a href="https://nodejs.org/en/download/">DOWNLOADS</a>，选择Windows Binary(.zip)下的<code>32-bit</code>或<code>64-bit</code>即可直接下载。<br><img src="https://itatboy.github.io//image/IDE/IDE-1/1.png" alt="图1"></li><li><strong>解压</strong><br>在D盘新建<code>Nodejs</code>文件夹，将下载的zip压缩包解压到该文件内，同时在该文件夹创建<code>npm</code>和<code>npm-cache</code>两个文件夹，如下所示：<br><img src="https://itatboy.github.io//image/IDE/IDE-1/2.png" alt="图2"></li><li><strong>添加环境变量</strong><br>依次打开<code>设置</code>-&gt;<code>系统</code>-&gt;<code>关于</code>-&gt;<code>高级系统设置</code>-&gt;<code>环境变量</code>，在<code>系统变量</code>内找到<code>Path</code>，双击<code>Path</code>进入编辑环境变量界面，点击右侧浏览按钮，依次将node目录和npm目录添加到环境变量，一路确定即可。<br><img src="https://itatboy.github.io//image/IDE/IDE-1/3.png" alt="图3"><br><img src="https://itatboy.github.io//image/IDE/IDE-1/4.png" alt="图4"></li><li><strong>设置npm全局模块目录和缓存目录</strong><pre class=" language-java"><code class="language-java">npm config set prefix <span class="token string">"D:\App\Nodejs\npm"</span>npm config set cache <span class="token string">"D:\App\Nodejs\npm-cache"</span></code></pre></li><li><strong>修改镜像源</strong><pre class=" language-java"><code class="language-java">npm config set registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org</code></pre></li><li><strong>验证</strong><br>使用<code>Win+R</code>快捷键打开运行窗口，输入<code>CMD</code>并回车，输入<code>node -v</code>和<code>npm-v</code>，得到版本信息即为配置成功。<br><img src="https://itatboy.github.io//image/IDE/IDE-1/5.png" alt="图5"></li></ul><h2 id="二、msi方式安装"><a href="#二、msi方式安装" class="headerlink" title="二、msi方式安装"></a>二、msi方式安装</h2>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Home Assistant-2：巧用Zigbee2MQTT桥接Zigbee网络</title>
      <link href="//post/HA-2.html"/>
      <url>//post/HA-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p><a href="https://www.zigbee2mqtt.io/">Zigbee2MQTT官网</a><br><a href="https://randomnerdtutorials.com/how-to-install-mosquitto-broker-on-raspberry-pi/">Mosquitto官网</a><br><a href="https://www.rs-online.com/designspark/rounding-up-unruly-zigbees-with-zigbee2mqtt-cn">参考教程一</a><br><a href="https://www.jianshu.com/p/a82d816c69a7">参考教程二</a></p><pre class=" language-c"><code class="language-c"><span class="token macro property"># Stopping Zigbee2MQTT</span>sudo systemctl stop zigbee2mqtt<span class="token macro property"># Starting Zigbee2MQTT</span>sudo systemctl start zigbee2mqtt<span class="token macro property"># View the log of Zigbee2MQTT</span>sudo journalctl <span class="token operator">-</span>u zigbee2mqtt<span class="token punctuation">.</span>service <span class="token operator">-</span>f<span class="token macro property"># Mosquitto 打印消息</span>mosquitto_sub <span class="token operator">-</span>v <span class="token operator">-</span>t zigbee2mqtt<span class="token operator">/</span>#<span class="token macro property"># Mosquitto 打印debug信息</span>mosquitto_sub <span class="token operator">-</span>d <span class="token operator">-</span>t zigbee2mqtt<span class="token operator">/</span>#</code></pre>]]></content>
      
      
      <categories>
          
          <category> Home Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> Home Assistant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Home Assistant-1：基于树莓派的多种安装方式</title>
      <link href="//post/HA-1.html"/>
      <url>//post/HA-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p><a href="https://www.home-assistant.io/">Home Assistans官网</a><br><a href="https://www.home-assistant.io/installation/">官方安装指导</a><br><a href="https://blog.csdn.net/weixin_46145842/article/details/111873759?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-19.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-19.no_search_link">参考教程一</a><br><a href="https://post.smzdm.com/p/avwpl8k9/">参考教程二</a><br><a href="https://www.jianshu.com/p/a3099534601a">Docker安装参考一</a><br><a href="https://sspai.com/post/60414">Docker安装参考二</a><br><a href="https://hacs.xyz/docs/setup/remove">HACS安装参考</a></p><p>官方提供了四种Home Assistans的安装方法，这里记录下针对国内网络环境成功安装的步骤<br><img src="https://itatboy.github.io//image/HA/HA-1/1.png" alt="图1"></p><h2 id="一、Home-Assistant-Operating-System"><a href="#一、Home-Assistant-Operating-System" class="headerlink" title="一、Home Assistant Operating System"></a>一、Home Assistant Operating System</h2><p> <strong>硬件准备</strong></p><ul><li>树莓派 </li><li>树莓派电源</li><li>SD卡</li><li>读卡器或SD卡套</li><li>网线</li></ul><p><strong>安装步骤</strong></p><ul><li><p>将插入SD卡的读卡器或SD卡套插入计算机</p></li><li><p>下载并启动<a href="https://www.balena.io/etcher/">Balena Etcher</a></p></li><li><p>选择<code>Flash from URL</code><img src="https://itatboy.github.io//image/HA/HA-1/2.png" alt="图2"></p></li><li><p>选择并复制对应树莓派的URL<br>  Raspberry Pi 4 64-bit</p><blockquote><p><a href="https://github.com/home-assistant/operating-system/releases/download/6.3/haos_rpi4-64-6.3.img.xz">https://github.com/home-assistant/operating-system/releases/download/6.3/haos_rpi4-64-6.3.img.xz</a>    </p></blockquote><p>  Raspberry Pi 4 32-bit</p><blockquote><p><a href="https://github.com/home-assistant/operating-system/releases/download/6.3/haos_rpi4-6.3.img.xz">https://github.com/home-assistant/operating-system/releases/download/6.3/haos_rpi4-6.3.img.xz</a></p></blockquote><p>  Raspberry Pi 3 64-bit</p><blockquote><p><a href="https://github.com/home-assistant/operating-system/releases/download/6.3/haos_rpi3-64-6.3.img.xz">https://github.com/home-assistant/operating-system/releases/download/6.3/haos_rpi3-64-6.3.img.xz</a></p></blockquote><p>  Raspberry Pi 3 32-bit</p><blockquote><p><a href="https://github.com/home-assistant/operating-system/releases/download/6.3/haos_rpi3-6.3.img.xz">https://github.com/home-assistant/operating-system/releases/download/6.3/haos_rpi3-6.3.img.xz</a></p></blockquote></li><li><p>将URL粘贴到<code>Balena Etcher</code>，并点击<code>OK</code><br><img src="https://itatboy.github.io//image/HA/HA-1/3.png" alt="图3"></p></li><li><p>等待<code>Balena Etcher</code>下载<code>image</code>，完成后点击<code>Select target</code><br><img src="https://itatboy.github.io//image/HA/HA-1/4.png" alt="图4"></p></li><li><p>选择需要烧录系统的SD卡<br><img src="https://itatboy.github.io//image/HA/HA-1/5.png" alt="图5"></p></li><li><p>点击<code>Flash</code>开始烧录系统镜像<br><img src="https://itatboy.github.io//image/HA/HA-1/6.png" alt="图6"></p></li><li><p>烧录完成，你将看到如下界面<br><img src="https://itatboy.github.io//image/HA/HA-1/7.png" alt="图7"></p><blockquote><p><code>重要提示：按照官方提供的安装步骤，进行到这里就可以将SD卡插入树莓派并启动树莓派了。但受限于国内网络环境，大陆用户还需要进行如下配置！</code></p></blockquote></li></ul><p><strong>网络配置-网线连接</strong></p><ul><li><p>在SD卡的<code>hassos-boot</code>分区根目录创建<code>CONFIG</code>文件夹，<code>CONFIG</code>文件夹内创建<code>network</code>文件夹，在<code>network</code>文件夹内创建<code>my-network.txt</code>文本文件，内容如下：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">[</span>connection<span class="token punctuation">]</span>id<span class="token operator">=</span>my<span class="token operator">-</span>networkuuid<span class="token operator">=</span>a12096ed<span class="token number">-5319</span><span class="token operator">-</span>4e2e<span class="token operator">-</span>ad7f<span class="token operator">-</span>7a2e04dfae1btype<span class="token operator">=</span><span class="token number">802</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span>ethernet<span class="token punctuation">[</span>ipv4<span class="token punctuation">]</span>method<span class="token operator">=</span><span class="token keyword">auto</span><span class="token punctuation">[</span>ipv6<span class="token punctuation">]</span>addr<span class="token operator">-</span>gen<span class="token operator">-</span>mode<span class="token operator">=</span>stable<span class="token operator">-</span>privacymethod<span class="token operator">=</span><span class="token keyword">auto</span></code></pre></li><li><p>在<a href="https://www.uuidgenerator.net/version4">UUID网站</a>申请UUID4的ID，并替换上述文本内的uuid</p></li><li><p>将文件扩展名修改为<code>conf</code>，并使用Nodepad修改文件编码为<code>UNIX</code></p></li></ul><p><strong>时间同步服务器配置</strong></p><blockquote><p>Home Assistans默认使用<code>Google</code>的时间同步服务器，受限于国内网络环境，需要修改为国内服务器</p></blockquote><ul><li><p>在<code>CONFIG</code>文件夹内创建<code>timesyncd.txt</code>，内容如下：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">[</span>Time<span class="token punctuation">]</span>NTP<span class="token operator">=</span>time1<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>comtime2<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com time3<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>comFallbackNTP<span class="token operator">=</span>ntp1<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>comntp2<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com ntp3<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com</code></pre></li><li><p>将文件扩展名修改为<code>conf</code>，并使用Nodepad修改文件编码为<code>UNIX</code></p></li></ul><p><strong>启动树莓派</strong></p><ul><li>将SD卡插入树莓派，并接入网线，打开电源开关，稍等三分钟左右，打开<a href="http://homeassistant.local:8123/">http://homeassistant.local:8123</a>，界面如下表示Home Assistans正在进行安装。<br><img src="https://itatboy.github.io//image/HA/HA-1/8.png" alt="图8"></li><li>稍等二十分钟（取决于你的网络状况），刷新网页出现登录界面，代表安装完成<br><img src="https://itatboy.github.io//image/HA/HA-1/9.png" alt="图9"></li></ul><h2 id="二、Container"><a href="#二、Container" class="headerlink" title="二、Container"></a>二、Container</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.home-assistant.io/">HomeAssistant官网</a><br><a href="https://blog.csdn.net/zuobianfy/article/details/109482744">参考教程</a><br><a href="https://bbs.hassbian.com/thread-4723-1-1.html">404问题解决</a></p><h3 id="一、更换pip源"><a href="#一、更换pip源" class="headerlink" title="一、更换pip源"></a>一、更换pip源</h3><h3 id="二、更换apt源"><a href="#二、更换apt源" class="headerlink" title="二、更换apt源"></a>二、更换apt源</h3><h3 id="三、安装Python3-8"><a href="#三、安装Python3-8" class="headerlink" title="三、安装Python3.8"></a>三、安装Python3.8</h3><h3 id="四、安装HomeAssistant"><a href="#四、安装HomeAssistant" class="headerlink" title="四、安装HomeAssistant"></a>四、安装HomeAssistant</h3><h3 id="五、运行hass"><a href="#五、运行hass" class="headerlink" title="五、运行hass"></a>五、运行hass</h3><h3 id="六、解决网页404"><a href="#六、解决网页404" class="headerlink" title="六、解决网页404"></a>六、解决网页404</h3><h3 id="七、开机自启hass"><a href="#七、开机自启hass" class="headerlink" title="七、开机自启hass"></a>七、开机自启hass</h3>]]></content>
      
      
      <categories>
          
          <category> Home Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> Home Assistant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github与Hexo搭建个人博客</title>
      <link href="//post/github%20hexo.html"/>
      <url>//post/github%20hexo.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000021614307">hexo+github搭建博客(超级详细版，精细入微)</a></p><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">使用hexo+github搭建免费个人博客详细教程</a></p><p><a href="https://itatboy.github.io/">年少禾青</a></p><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p><strong>你需要：</strong></p><ul><li>一个Github账号，<a href="https://github.com/">点我注册</a></li><li>已安装Git，完成基本配置，<a href="">点我了解如何配置</a></li><li>已安装node.js、npm</li></ul><h1 id="二、创建Github仓库"><a href="#二、创建Github仓库" class="headerlink" title="二、创建Github仓库"></a>二、创建Github仓库</h1><h1 id="三、Hexo创建博客"><a href="#三、Hexo创建博客" class="headerlink" title="三、Hexo创建博客"></a>三、Hexo创建博客</h1><h2 id="①-Hexo是什么"><a href="#①-Hexo是什么" class="headerlink" title="① Hexo是什么"></a>① Hexo是什么</h2><h2 id="②-Hexo安装"><a href="#②-Hexo安装" class="headerlink" title="② Hexo安装"></a>② Hexo安装</h2><h2 id="③-Hexo初始化"><a href="#③-Hexo初始化" class="headerlink" title="③ Hexo初始化"></a>③ Hexo初始化</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器收藏备份</title>
      <link href="//post/collect.html"/>
      <url>//post/collect.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/21611724">打造TypeScript的Visual Studio Code开发环境</a></p><p><a href="https://www.cnblogs.com/xxiaonian/p/14490985.html">node安装以及环境变量配置 - 夏小念</a></p><p><a href="https://blog.csdn.net/qq_41684249/article/details/86743840">NTC热敏电阻温度计算以及C语言实现</a></p><p><a href="https://blog.csdn.net/qq_36296398/article/details/110953527?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162933547716780271533588%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162933547716780271533588&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduend~default-3-110953527.pc_v2_rank_blog_default&utm_term=%E7%83%AD%E6%95%8F%E7%94%B5%E9%98%BBC%E8%AF%AD%E8%A8%80&spm=1018.2226.3001.4450">NTC热敏电阻计算温度之C代码</a></p><p><a href="https://blog.csdn.net/yangyang_1024/article/details/80563522">热敏电阻计算公式</a></p><p><a href="https://blog.csdn.net/flydream0/article/details/54142208">如何使用CubeMx生成一个DFU工程</a></p><p><a href="https://shequ.stmicroelectronics.cn/forum.php?mod=viewthread&tid=612782">【实战经验】USB DFU培训 - STM32团队</a></p><p><a href="https://blog.csdn.net/affe00/article/details/104162892">STM32H743_DFU_QSPI_flash</a></p><p><a href="http://www.armbbs.cn/forum.php?mod=viewthread&tid=94732">USB升级外部的SPI FLASH - STM32H7</a></p><p><a href="https://blog.csdn.net/chenweizhen1991/article/details/104841069?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.essearch_pc_relevant&spm=1001.2101.3001.4242">EtherCAT学习之路——对象字典</a></p><p><a href="https://blog.csdn.net/baidu_34570497/article/details/51114189">Keil中的中文字体乱码解决方法</a></p><p><a href="https://www.pianshen.com/article/8098841259/">【EtherCAT实践篇】四、TwinCAT 3实验1-基本操作</a></p><p><a href="https://blog.csdn.net/weixin_44968310/article/details/102757153">hassio中Node-RED出现502 bad gateway的问题解决</a></p><p><a href="https://bbs.iobroker.cn/t/topic/6337/7">node-red接入阿里飞燕平台同时接入天猫精灵语控 - Node-Red</a></p><p><a href="https://hktkdy.com/2020/12/26/2020/2020%E5%B9%B4%E5%9B%9E%E9%A1%BE/">2020年度回顾 | 海阔天空的云</a></p><p><a href="https://hufangyun.com/categories/%E9%9A%8F%E7%AC%94/">胡方运的博客</a></p><p><a href="https://www.cnblogs.com/embedded-coder/p/10180554.html">嵌入式码农博客</a></p><p><a href="https://www.volantgoat.com/archives/60/">谷歌云搭建SSR服务器 - VolantGoat</a></p><p><a href="https://blog.csdn.net/skycmq/article/details/118468449">Altium Designer(五)——铺铜和电器规则检查</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-10：输出Gerber和钻孔文件</title>
      <link href="//post/AltiumDesigner21-10.html"/>
      <url>//post/AltiumDesigner21-10.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p><h2 id="一、输出Gerber文件"><a href="#一、输出Gerber文件" class="headerlink" title="一、输出Gerber文件"></a>一、输出Gerber文件</h2><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/1.jpg" alt="图1"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/2.jpg" alt="图2"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/3.jpg" alt="图3"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/4.jpg" alt="图4"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/5.jpg" alt="图5"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/6.jpg" alt="图6"></p><h2 id="二、输出钻孔文件"><a href="#二、输出钻孔文件" class="headerlink" title="二、输出钻孔文件"></a>二、输出钻孔文件</h2><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/7.jpg" alt="图7"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/8.jpg" alt="图8"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/9.jpg" alt="图9"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-10/10.jpg" alt="图10"></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-1：安装与激活</title>
      <link href="//post/AltiumDesigner21-1.html"/>
      <url>//post/AltiumDesigner21-1.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-1/1.jpg" alt="图1"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-1/2.jpg" alt="图2"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-1/3.jpg" alt="图3"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-1/4.jpg" alt="图4"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-1/5.jpg" alt="图5"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-1/6.jpg" alt="图6"></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-1/7.jpg" alt="图7"></p><h2 id="二、激活"><a href="#二、激活" class="headerlink" title="二、激活"></a>二、激活</h2><p><a href="http://imyoung.ysepan.com/">激活 Licenses</a></p><p>将上述包内的<code>shfolder.dll</code>复制到AD安装路径下，打开AD，点击 Add standalone license file，选择包内的License文件即可</p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-1/8.jpg" alt="图8"></p><h2 id="三、中文设置"><a href="#三、中文设置" class="headerlink" title="三、中文设置"></a>三、中文设置</h2><p>点击软件右上角<code>功能齿轮</code>-<code>System</code>-<code>General</code>勾选<code>使用本地资源</code></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-11：常见问题解决方案</title>
      <link href="//post/AltiumDesigner21-11.html"/>
      <url>//post/AltiumDesigner21-11.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p><h2 id="一、常用快捷键"><a href="#一、常用快捷键" class="headerlink" title="一、常用快捷键"></a>一、常用快捷键</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>CTRL + M</code></td><td>测量</td></tr><tr><td><code>CTRL + W</code></td><td>走线</td></tr><tr><td><code>CTRL + 鼠标左键</code></td><td>高亮指定网络，选择空白处按下可以取消高亮</td></tr><tr><td><code>CTRL + G</code></td><td>设置格栅</td></tr><tr><td><code>Q</code></td><td>切换单位（公制或英制）</td></tr><tr><td><code>2</code></td><td>走线</td></tr><tr><td><code>SHIFT+ 鼠标右键</code></td><td>旋转查看3D视图</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-2：原理图绘制</title>
      <link href="//post/AltiumDesigner21-2.html"/>
      <url>//post/AltiumDesigner21-2.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-3：原理图导入PCB</title>
      <link href="//post/AltiumDesigner21-3.html"/>
      <url>//post/AltiumDesigner21-3.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-5：泪滴</title>
      <link href="//post/AltiumDesigner21-5.html"/>
      <url>//post/AltiumDesigner21-5.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-4：规则设定</title>
      <link href="//post/AltiumDesigner21-4.html"/>
      <url>//post/AltiumDesigner21-4.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p><h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><h2 id="一、前期设置"><a href="#一、前期设置" class="headerlink" title="一、前期设置"></a>一、前期设置</h2><h3 id="1、解决拖动卡顿，关闭DRC"><a href="#1、解决拖动卡顿，关闭DRC" class="headerlink" title="1、解决拖动卡顿，关闭DRC"></a>1、解决拖动卡顿，关闭DRC</h3><p>PCB页面右键，选择<code>优先选项</code>-<code>PCB Editor</code>-<code>General</code>取消勾选<code>在线DRC</code></p><h3 id="2、设置走线参数"><a href="#2、设置走线参数" class="headerlink" title="2、设置走线参数"></a>2、设置走线参数</h3><p>依次选择<code>设计</code>-<code>规则</code>-<code>Design Rules</code>-<code>Routing</code>-<code>Width</code>，设置<code>最大、最小、首选线宽</code></p><h3 id="3、设置过孔参数"><a href="#3、设置过孔参数" class="headerlink" title="3、设置过孔参数"></a>3、设置过孔参数</h3><p>依次选择<code>设计</code>-<code>规则</code>-<code>Design Rules</code>-<code>Routing</code>-<code>Routing Via Style</code>，设置<code>过孔直径及过孔孔径参数</code></p><h3 id="4、设置对象与丝印距离"><a href="#4、设置对象与丝印距离" class="headerlink" title="4、设置对象与丝印距离"></a>4、设置对象与丝印距离</h3><p>依次选择<code>设计</code>-<code>规则</code>-<code>Design Rules</code>-<code>Manufacturing</code>-<code>Silk To Solder Mask Clearance</code></p><h3 id="5、设置丝印与丝印距离"><a href="#5、设置丝印与丝印距离" class="headerlink" title="5、设置丝印与丝印距离"></a>5、设置丝印与丝印距离</h3><p>依次选择<code>设计</code>-<code>规则</code>-<code>Design Rules</code>-<code>Manufacturing</code>-<code>Silk To Silk Clearance</code></p><h3 id="6、设置覆铜与走线距离"><a href="#6、设置覆铜与走线距离" class="headerlink" title="6、设置覆铜与走线距离"></a>6、设置覆铜与走线距离</h3><p>新建的规则名称为<code>Clearance_1</code>，选择<code>Custom Query</code>输入<code>InPolygon</code></p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-4/1.jpg" alt="图1"></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-6：覆铜</title>
      <link href="//post/AltiumDesigner21-6.html"/>
      <url>//post/AltiumDesigner21-6.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p><h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>覆铜管理器快捷键<code>T-G-M</code></p><h2 id="一、覆铜管理器覆铜"><a href="#一、覆铜管理器覆铜" class="headerlink" title="一、覆铜管理器覆铜"></a>一、覆铜管理器覆铜</h2><p>打开<code>覆铜管理器</code>，选择<code>来自...的新多边形</code>-<code>板外形</code>，设置<code>Net</code> <code>Layer</code> <code>Name</code>，勾选<code>Remove Dead Copper</code>去除死铜</p><p><img src="https://itatboy.github.io//image/AltiumDesigner/AltiumDesigner21-6/1.jpg" alt="图1"></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-7：对地过孔</title>
      <link href="//post/AltiumDesigner21-7.html"/>
      <url>//post/AltiumDesigner21-7.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-8：盖绿油</title>
      <link href="//post/AltiumDesigner21-8.html"/>
      <url>//post/AltiumDesigner21-8.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 21-9：规则检查</title>
      <link href="//post/AltiumDesigner21-9.html"/>
      <url>//post/AltiumDesigner21-9.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://itatboy.github.io/post/AltiumDesigner21-1.html">Altium Designer 21-1：安装与激活</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-2.html">Altium Designer 21-2：原理图绘制</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-3.html">Altium Designer 21-3：原理图导入PCB</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-4.html">Altium Designer 21-4：规则设定</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-5.html">Altium Designer 21-5：泪滴</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-6.html">Altium Designer 21-6：覆铜</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-7.html">Altium Designer 21-7：对地过孔</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-8.html">Altium Designer 21-8：盖绿油</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-9.html">Altium Designer 21-9：规则检查</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-10.html">Altium Designer 21-10：输出Gerber和钻孔文件</a><br><a href="https://itatboy.github.io/post/AltiumDesigner21-11.html">Altium Designer 21-11：常见问题解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 硬件设计 </tag>
            
            <tag> Altium Designer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
